// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatAuthClient is the client API for ChatAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatAuthClient interface {
	RPCLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	RPCRegister(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	RPCLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	RPCCheckToken(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type chatAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewChatAuthClient(cc grpc.ClientConnInterface) ChatAuthClient {
	return &chatAuthClient{cc}
}

func (c *chatAuthClient) RPCLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.ChatAuth/RPCLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAuthClient) RPCRegister(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.ChatAuth/RPCRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAuthClient) RPCLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.ChatAuth/RPCLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAuthClient) RPCCheckToken(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.ChatAuth/RPCCheckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatAuthServer is the server API for ChatAuth service.
// All implementations must embed UnimplementedChatAuthServer
// for forward compatibility
type ChatAuthServer interface {
	RPCLogin(context.Context, *LoginRequest) (*AuthResponse, error)
	RPCRegister(context.Context, *RegisterRequest) (*AuthResponse, error)
	RPCLogout(context.Context, *LogoutRequest) (*AuthResponse, error)
	RPCCheckToken(context.Context, *LogoutRequest) (*AuthResponse, error)
	mustEmbedUnimplementedChatAuthServer()
}

// UnimplementedChatAuthServer must be embedded to have forward compatible implementations.
type UnimplementedChatAuthServer struct {
}

func (UnimplementedChatAuthServer) RPCLogin(context.Context, *LoginRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCLogin not implemented")
}
func (UnimplementedChatAuthServer) RPCRegister(context.Context, *RegisterRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCRegister not implemented")
}
func (UnimplementedChatAuthServer) RPCLogout(context.Context, *LogoutRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCLogout not implemented")
}
func (UnimplementedChatAuthServer) RPCCheckToken(context.Context, *LogoutRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCCheckToken not implemented")
}
func (UnimplementedChatAuthServer) mustEmbedUnimplementedChatAuthServer() {}

// UnsafeChatAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatAuthServer will
// result in compilation errors.
type UnsafeChatAuthServer interface {
	mustEmbedUnimplementedChatAuthServer()
}

func RegisterChatAuthServer(s grpc.ServiceRegistrar, srv ChatAuthServer) {
	s.RegisterService(&ChatAuth_ServiceDesc, srv)
}

func _ChatAuth_RPCLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAuthServer).RPCLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatAuth/RPCLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAuthServer).RPCLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatAuth_RPCRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAuthServer).RPCRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatAuth/RPCRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAuthServer).RPCRegister(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatAuth_RPCLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAuthServer).RPCLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatAuth/RPCLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAuthServer).RPCLogout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatAuth_RPCCheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAuthServer).RPCCheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatAuth/RPCCheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAuthServer).RPCCheckToken(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatAuth_ServiceDesc is the grpc.ServiceDesc for ChatAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChatAuth",
	HandlerType: (*ChatAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RPCLogin",
			Handler:    _ChatAuth_RPCLogin_Handler,
		},
		{
			MethodName: "RPCRegister",
			Handler:    _ChatAuth_RPCRegister_Handler,
		},
		{
			MethodName: "RPCLogout",
			Handler:    _ChatAuth_RPCLogout_Handler,
		},
		{
			MethodName: "RPCCheckToken",
			Handler:    _ChatAuth_RPCCheckToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth.proto",
}
